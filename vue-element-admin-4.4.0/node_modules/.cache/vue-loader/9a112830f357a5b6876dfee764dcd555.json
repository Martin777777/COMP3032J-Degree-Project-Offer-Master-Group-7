{"remainingRequest":"/Users/xujinfengxu/Desktop/computer/tmp/comp3032j_fyp_thesis_group_7/vue-element-admin-4.4.0/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/xujinfengxu/Desktop/computer/tmp/comp3032j_fyp_thesis_group_7/vue-element-admin-4.4.0/src/views/table/school.vue?vue&type=style&index=0&id=a4561122&lang=css&","dependencies":[{"path":"/Users/xujinfengxu/Desktop/computer/tmp/comp3032j_fyp_thesis_group_7/vue-element-admin-4.4.0/src/views/table/school.vue","mtime":1679304454081},{"path":"/Users/xujinfengxu/Desktop/computer/tmp/comp3032j_fyp_thesis_group_7/vue-element-admin-4.4.0/node_modules/css-loader/dist/cjs.js","mtime":1677830574663},{"path":"/Users/xujinfengxu/Desktop/computer/tmp/comp3032j_fyp_thesis_group_7/vue-element-admin-4.4.0/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1677830576466},{"path":"/Users/xujinfengxu/Desktop/computer/tmp/comp3032j_fyp_thesis_group_7/vue-element-admin-4.4.0/node_modules/postcss-loader/src/index.js","mtime":1677830575175},{"path":"/Users/xujinfengxu/Desktop/computer/tmp/comp3032j_fyp_thesis_group_7/vue-element-admin-4.4.0/node_modules/cache-loader/dist/cjs.js","mtime":1677830573783},{"path":"/Users/xujinfengxu/Desktop/computer/tmp/comp3032j_fyp_thesis_group_7/vue-element-admin-4.4.0/node_modules/vue-loader/lib/index.js","mtime":1677830575589}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5ybHsKICAgIG1hcmdpbjogMTBweDsKfQo="},{"version":3,"sources":["school.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsWA;AACA;AACA","file":"school.vue","sourceRoot":"src/views/table","sourcesContent":["<template>\n  <div class=\"app-container\">\n    <div class=\"filter-container\">\n      <el-input v-model=\"listQuery.name\" placeholder=\"SchoolName\" style=\"width: 200px;\" class=\"filter-item\" @keyup.enter.native=\"handleFilter\" />\n      <el-select v-model=\"listQuery.sort\" style=\"width: 140px\" class=\"filter-item\" @change=\"handleFilter\">\n        <el-option v-for=\"item in sortOptions\" :key=\"item.key\" :label=\"item.label\" :value=\"item.key\" />\n      </el-select>\n      <el-button v-waves class=\"filter-item\" type=\"primary\" icon=\"el-icon-search\" @click=\"handleFilter\">\n        Search\n      </el-button>\n      <el-button class=\"filter-item\" style=\"margin-left: 10px;\" type=\"primary\" icon=\"el-icon-edit\" @click=\"handleCreate\">\n        Add\n      </el-button>\n      <el-button v-waves :loading=\"downloadLoading\" class=\"filter-item\" type=\"primary\" icon=\"el-icon-download\" @click=\"handleDownload\">\n        Export\n      </el-button>\n      <el-checkbox v-model=\"showReviewer\" class=\"filter-item\" style=\"margin-left:15px;\" @change=\"tableKey=tableKey+1\">\n        reviewer\n      </el-checkbox>\n    </div>\n\n    <el-table\n      :key=\"tableKey\"\n      v-loading=\"listLoading\"\n      :data=\"list\"\n      border\n      fit\n      highlight-current-row\n      style=\"width: 100%;\"\n      @sort-change=\"sortChange\"\n    >\n      <el-table-column label=\"SchoolName\" width=\"350px\" align=\"center\">\n        <template slot-scope=\"{row}\">\n          <span>{{ row.name }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column label=\"Actions\" align=\"center\" min-width=\"280\" class-name=\"small-padding fixed-width\">\n        <template slot-scope=\"{row,$index}\">\n          <router-link class=\"rl\" :to=\"'/table/program/' + row.id\">\n            <el-button type=\"primary\" size=\"mini\">\n              Programs\n            </el-button>\n          </router-link>\n          <el-button type=\"primary\" size=\"mini\" @click=\"handleUpdate(row)\">\n            Edit\n          </el-button>\n          <el-button v-if=\"row.status!='published'\" size=\"mini\" type=\"success\" @click=\"handleModifyStatus(row,'published')\">\n            Publish\n          </el-button>\n          <el-button v-if=\"row.status!='draft'\" size=\"mini\" @click=\"handleModifyStatus(row,'draft')\">\n            Draft\n          </el-button>\n          <el-button v-if=\"row.status!='deleted'\" size=\"mini\" type=\"danger\" @click=\"handleDelete(row,$index)\">\n            Delete\n          </el-button>\n        </template>\n      </el-table-column>\n    </el-table>\n\n    <pagination v-show=\"total>0\" :total=\"total\" :page.sync=\"listQuery.page\" :limit.sync=\"listQuery.size\" @pagination=\"getList\" />\n\n    <el-dialog :title=\"textMap[dialogStatus]\" :visible.sync=\"dialogFormVisible\">\n      <el-form ref=\"dataForm\" :rules=\"rules\" :model=\"temp\" label-position=\"left\" label-width=\"150px\" style=\"width: 400px; margin-left:50px;\">\n        <el-form-item label=\"SchoolName\" prop=\"name\">\n          <el-input v-model=\"temp.name\" />\n        </el-form-item>\n      </el-form>\n      <div slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"dialogFormVisible = false\">\n          Cancel\n        </el-button>\n        <el-button type=\"primary\" @click=\"dialogStatus==='create'?createData():updateData()\">\n          Confirm\n        </el-button>\n      </div>\n    </el-dialog>\n\n    <el-dialog :visible.sync=\"dialogPvVisible\" title=\"Reading statistics\">\n      <el-table :data=\"pvData\" border fit highlight-current-row style=\"width: 100%\">\n        <el-table-column prop=\"key\" label=\"Channel\" />\n        <el-table-column prop=\"pv\" label=\"Pv\" />\n      </el-table>\n      <span slot=\"footer\" class=\"dialog-footer\">\n        <el-button type=\"primary\" @click=\"dialogPvVisible = false\">Confirm</el-button>\n      </span>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nimport { fetchList, fetchPv, deleteSchool, createSchool, updateSchool, pageSchoolListCondition } from '@/api/school'\nimport waves from '@/directive/waves' // waves directive\nimport { parseTime } from '@/utils'\nimport Pagination from '@/components/Pagination'\n\n// import { getPrograms } from '@/api/program'\n// secondary package based on el-pagination\n\nconst calendarTypeOptions = [\n  { key: 'CN', display_name: 'China' },\n  { key: 'US', display_name: 'USA' },\n  { key: 'JP', display_name: 'Japan' },\n  { key: 'EU', display_name: 'Eurozone' }\n]\n\n// arr to obj, such as { CN : \"China\", US : \"USA\" }\nconst calendarTypeKeyValue = calendarTypeOptions.reduce((acc, cur) => {\n  acc[cur.key] = cur.display_name\n  return acc\n}, {})\n\nexport default {\n  name: 'School',\n  components: { Pagination },\n  directives: { waves },\n  filters: {\n    statusFilter(status) {\n      const statusMap = {\n        published: 'success',\n        draft: 'info',\n        deleted: 'danger'\n      }\n      return statusMap[status]\n    },\n    typeFilter(type) {\n      return calendarTypeKeyValue[type]\n    }\n  },\n  data() {\n    return {\n      tableKey: 0,\n      list: null,\n      total: 0,\n      listLoading: true,\n      listQuery: {\n        page: 1,\n        size: 20,\n        name: '',\n        sort: '+id'\n      },\n      roles: ['USER', 'ADMIN'],\n      calendarTypeOptions,\n      sortOptions: [{ label: 'School Name Ascending', key: '+id' }, { label: 'School Name Descending', key: '-id' }],\n      statusOptions: ['published', 'draft', 'deleted'],\n      showReviewer: false,\n      temp: {\n        name: ''\n      },\n      dialogFormVisible: false,\n      dialogStatus: '',\n      textMap: {\n        update: 'Edit',\n        create: 'Create'\n      },\n      dialogPvVisible: false,\n      pvData: [],\n      rules: {\n        name: [{ required: true, message: 'school name is required', trigger: 'blur' }]\n      },\n      downloadLoading: false\n    }\n  },\n  created() {\n    this.getList()\n    // console.log(\"54\")\n  },\n  methods: {\n    getList() {\n      this.listLoading = true\n      fetchList(this.listQuery).then(response => {\n        this.list = response['_embedded']['schools']\n        this.total = response['_embedded']['schools'].length\n        console.log(this.list)\n        // for (let i = 0; i < this.list.length; i++) {\n        //   const school = this.list[i]\n        //   school['programs'] = []\n        //   getPrograms(school['id']).then(roleResponse => {\n        //     const roles = roleResponse['_embedded']['programs']\n        //     for (const index in roles) {\n        //       user['roles'].push(roles[index]['name'])\n        //     }\n        //     if (i === this.list.length - 1) {\n        //       this.listLoading = false\n        //       this.tableKey = 1\n        //     }\n        //   })\n        // }\n        this.listLoading = false\n      })\n    },\n    handleFilter() {\n      this.listQuery.page = 1\n      console.log(this.listQuery)\n      var schoolQuery = {}\n      schoolQuery.name = this.listQuery.name\n      if (this.listQuery.sort === '-id') {\n        schoolQuery.sort = false\n      } else {\n        schoolQuery.sort = true\n      }\n      // console.log(schoolQuery)\n      // console.log(this.listQuery)\n      this.listLoading = true\n      pageSchoolListCondition(this.listQuery.page, this.listQuery.size, schoolQuery)\n        .then(response => {\n          // response接口返回的数据\n          // console.log(response)\n          this.list = response.data.data.content\n          this.total = response.data.data.size\n          console.log(this.list)\n          this.listLoading = false\n        })\n        .catch(error => {\n          console.log(error)\n        })\n    },\n\n    handleModifyStatus(row, status) {\n      this.$message({\n        message: '操作Success',\n        type: 'success'\n      })\n      row.status = status\n    },\n    sortChange(data) {\n      const { prop, order } = data\n      if (prop === 'id') {\n        this.sortByID(order)\n      }\n    },\n    sortByID(order) {\n      if (order === 'ascending') {\n        this.listQuery.sort = '+id'\n      } else {\n        this.listQuery.sort = '-id'\n      }\n      this.handleFilter()\n    },\n    resetTemp() {\n      this.temp = {\n        name: '',\n        icon: ''\n      }\n    },\n    handleCreate() {\n      this.resetTemp()\n      this.dialogStatus = 'create'\n      this.dialogFormVisible = true\n      this.$nextTick(() => {\n        this.$refs['dataForm'].clearValidate()\n      })\n    },\n    createData() {\n      this.$refs['dataForm'].validate((valid) => {\n        if (valid) {\n          const school = {}\n          school.name = this.temp.name\n          console.log(school)\n          console.log('11111')\n          // const tempData = Object.assign({}, this.temp)\n          // tempData.timestamp = +new Date(tempData.timestamp) // change Thu Nov 30 2017 16:41:05 GMT+0800 (CST) to 1512031311464\n          createSchool(school).then(response => {\n            console.log(response)\n            this.temp.id = response.data.id\n            this.list.unshift(this.temp)\n            this.dialogFormVisible = false\n            this.$notify({\n              title: 'Success',\n              message: 'Create Successfully',\n              type: 'success',\n              duration: 2000\n            })\n          })\n        }\n      })\n    },\n    handleUpdate(row) {\n      this.temp = Object.assign({}, row) // copy obj\n      // this.temp.timestamp = new Date(this.temp.timestamp)\n      this.dialogStatus = 'update'\n      this.dialogFormVisible = true\n      this.$nextTick(() => {\n        this.$refs['dataForm'].clearValidate()\n      })\n    },\n    updateData() {\n      this.$refs['dataForm'].validate((valid) => {\n        if (valid) {\n          const school = {}\n          school.id = this.temp.id\n          school.name = this.temp.name\n          console.log(school)\n          console.log('11111')\n          // const tempData = Object.assign({}, this.temp)\n          // tempData.timestamp = +new Date(tempData.timestamp) // change Thu Nov 30 2017 16:41:05 GMT+0800 (CST) to 1512031311464\n          updateSchool(this.temp.id, school).then(() => {\n            console.log(school)\n            const index = this.list.findIndex(v => v.id === this.temp.id)\n            this.list.splice(index, 1, this.temp)\n            this.dialogFormVisible = false\n            this.$notify({\n              title: 'Success',\n              message: 'Update Successfully',\n              type: 'success',\n              duration: 2000\n            })\n          })\n        }\n      })\n    },\n    handleDelete(row, index) {\n      deleteSchool(row.id)\n      this.$notify({\n        title: 'Success',\n        message: 'Delete Successfully',\n        type: 'success',\n        duration: 2000\n      })\n      this.list.splice(index, 1)\n    },\n    handleFetchPv(pv) {\n      fetchPv(pv).then(response => {\n        this.pvData = response.data.pvData\n        this.dialogPvVisible = true\n      })\n    },\n    handleDownload() {\n      this.downloadLoading = true\n      import('@/vendor/Export2Excel').then(excel => {\n        const tHeader = ['timestamp', 'title', 'type', 'importance', 'status']\n        const filterVal = ['timestamp', 'title', 'type', 'importance', 'status']\n        const data = this.formatJson(filterVal)\n        excel.export_json_to_excel({\n          header: tHeader,\n          data,\n          filename: 'table-list'\n        })\n        this.downloadLoading = false\n      })\n    },\n    formatJson(filterVal) {\n      return this.list.map(v => filterVal.map(j => {\n        if (j === 'timestamp') {\n          return parseTime(v[j])\n        } else {\n          return v[j]\n        }\n      }))\n    },\n    getSortClass: function(key) {\n      const sort = this.listQuery.sort\n      return sort === `+${key}` ? 'ascending' : 'descending'\n    }\n  }\n}\n</script>\n\n<style>\n.rl{\n    margin: 10px;\n}\n</style>\n"]}]}